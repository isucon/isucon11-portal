// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dcim

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InstanceManagementClient is the client API for InstanceManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceManagementClient interface {
	InformInstanceStateUpdate(ctx context.Context, in *InformInstanceStateUpdateRequest, opts ...grpc.CallOption) (*InformInstanceStateUpdateResponse, error)
}

type instanceManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceManagementClient(cc grpc.ClientConnInterface) InstanceManagementClient {
	return &instanceManagementClient{cc}
}

func (c *instanceManagementClient) InformInstanceStateUpdate(ctx context.Context, in *InformInstanceStateUpdateRequest, opts ...grpc.CallOption) (*InformInstanceStateUpdateResponse, error) {
	out := new(InformInstanceStateUpdateResponse)
	err := c.cc.Invoke(ctx, "/isuxportal.proto.services.dcim.InstanceManagement/InformInstanceStateUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceManagementServer is the server API for InstanceManagement service.
// All implementations must embed UnimplementedInstanceManagementServer
// for forward compatibility
type InstanceManagementServer interface {
	InformInstanceStateUpdate(context.Context, *InformInstanceStateUpdateRequest) (*InformInstanceStateUpdateResponse, error)
	mustEmbedUnimplementedInstanceManagementServer()
}

// UnimplementedInstanceManagementServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceManagementServer struct {
}

func (UnimplementedInstanceManagementServer) InformInstanceStateUpdate(context.Context, *InformInstanceStateUpdateRequest) (*InformInstanceStateUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformInstanceStateUpdate not implemented")
}
func (UnimplementedInstanceManagementServer) mustEmbedUnimplementedInstanceManagementServer() {}

// UnsafeInstanceManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceManagementServer will
// result in compilation errors.
type UnsafeInstanceManagementServer interface {
	mustEmbedUnimplementedInstanceManagementServer()
}

func RegisterInstanceManagementServer(s grpc.ServiceRegistrar, srv InstanceManagementServer) {
	s.RegisterService(&InstanceManagement_ServiceDesc, srv)
}

func _InstanceManagement_InformInstanceStateUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InformInstanceStateUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceManagementServer).InformInstanceStateUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/isuxportal.proto.services.dcim.InstanceManagement/InformInstanceStateUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceManagementServer).InformInstanceStateUpdate(ctx, req.(*InformInstanceStateUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceManagement_ServiceDesc is the grpc.ServiceDesc for InstanceManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "isuxportal.proto.services.dcim.InstanceManagement",
	HandlerType: (*InstanceManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InformInstanceStateUpdate",
			Handler:    _InstanceManagement_InformInstanceStateUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "isuxportal/services/dcim/instance_management.proto",
}
