AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation for ISUCON Contestants
Resources:
#########################################
#  IAM
########################################
  IsuconEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  IsuconEC2InstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "IsuconEC2InstancePolicy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - "s3:ListBucket"
            Resource: "*"
      Roles:
      - !Ref IsuconEC2InstanceRole
  IsuconEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref IsuconEC2InstanceRole

#########################################
#  VPC
########################################
  IsuconVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "192.168.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: default
  IsuconInternetGateway:
    Type: "AWS::EC2::InternetGateway"
  IsuconInternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IsuconInternetGateway
      VpcId: !Ref IsuconVPC
  IsuconPublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !GetAtt CustomResource.ZoneName
      CidrBlock: "192.168.0.0/24"
      VpcId: !Ref IsuconVPC
      MapPublicIpOnLaunch: False
#########################################
#  Lambda-backed Custom Resource
########################################
  CustomResource:
    Type: Custom::PythonLambdaExecution
    Properties:
      ServiceToken: !GetAtt CustomFunction.Arn

  CustomFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse
          import boto3
          def handler(event, context):
            if event['RequestType'] == "Create":
              ec2 = boto3.client('ec2')
              response = ec2.describe_availability_zones(
                ZoneIds = ['apne1-az2']
              )
              ZoneName = response['AvailabilityZones'][0]['ZoneName']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"ZoneName" : ZoneName})
            elif event['RequestType'] == "Update":
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
            elif event['RequestType'] == "Delete":
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.handler
      Runtime: python3.8
      Timeout: 30
      Role: !GetAtt CustomFunctionLambdaExecutionRole.Arn
  CustomFunctionLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: IsuconCustomResorucePolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeAvailabilityZones
            Resource: "*"

#########################################
#  RouteTable
########################################
  IsuconPublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref IsuconVPC
  IsuconPublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref IsuconPublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref IsuconInternetGateway
  IsuconPublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref IsuconPublicSubnet
      RouteTableId: !Ref IsuconPublicRouteTable

#########################################
#  Security Group
########################################
  IsuconEC2InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref IsuconVPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"

#########################################
#  EC2
########################################
  IsuconEC2Instance0:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0827d8ed0295e3feb
      InstanceType: c5.large
      SecurityGroupIds:
        - !Ref IsuconEC2InstanceSecurityGroup
      SubnetId: !Ref IsuconPublicSubnet
      IamInstanceProfile:
        !Ref IsuconEC2InstanceProfile
  IsuconElascicIp0:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref IsuconEC2Instance0

  IsuconEC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0827d8ed0295e3feb
      InstanceType: c5.large
      SecurityGroupIds:
        - !Ref IsuconEC2InstanceSecurityGroup
      SubnetId: !Ref IsuconPublicSubnet
      IamInstanceProfile:
        !Ref IsuconEC2InstanceProfile
  IsuconElascicIp1:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref IsuconEC2Instance1

  IsuconEC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0827d8ed0295e3feb
      InstanceType: c5.large
      SecurityGroupIds:
        - !Ref IsuconEC2InstanceSecurityGroup
      SubnetId: !Ref IsuconPublicSubnet
      IamInstanceProfile:
        !Ref IsuconEC2InstanceProfile
  IsuconElascicIp2:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref IsuconEC2Instance2
